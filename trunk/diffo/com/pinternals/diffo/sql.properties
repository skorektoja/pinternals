##########################################################################################
db_version=0.0.9
ime_head_sap=INDEXME_SAP.COM
ime_head_customer=INDEXME_CUSTOMER

sql_initdb_00_format=PRAGMA legacy_file_format = OFF;
sql_initdb_00_pagesize=PRAGMA page_size=8192;
sql_initdb_01_drop=DROP TABLE IF EXISTS session;
# //TODO: добавить проверку валидности migrsql_tables и реального
migrsql_tables=sqlite_sequence,session,host,config,entity,ra,swcvdef,swcvdep,object,version
sql_initdb_02=CREATE TABLE session (\
    session_id  INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, \
    start_time  TIMESTAMP DEFAULT (CURRENT_TIMESTAMP) NOT NULL, \
    finish_time TIMESTAMP \
  );
sql_initdb_03_drop=DROP TABLE IF EXISTS host;
sql_initdb_04=CREATE TABLE host (\
    host_id     INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, \
    sid         TEXT NOT NULL  CHECK (length(sid)=3), \
    host_url    TEXT NOT NULL, \
    session_id  INTEGER NOT NULL REFERENCES session(session_id) \
  );
sql_initdb_05_drop=DROP TABLE IF EXISTS config;
sql_initdb_06=CREATE TABLE config (\
	property    TEXT NOT NULL,\
	host_id     INTEGER REFERENCES host(host_id), \
	value       TEXT,\
	session_id  INTEGER NOT NULL REFERENCES session, \
	PRIMARY KEY(property, host_id) \
  );
sql_initdb_09_drop=DROP TABLE IF EXISTS entity;
sql_initdb_10=CREATE TABLE entity (\
    entity_id   INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,\
    side        TEXT NOT NULL, \
    internal    TEXT NOT NULL, \
    host_id     INTEGER NOT NULL REFERENCES host(host_id) , \
    caption     TEXT NOT NULL, \
    seqno       INTEGER NOT NULL, \
    session_id  INTEGER NOT NULL REFERENCES session(session_id) , \
    CONSTRAINT unq UNIQUE (side,internal,host_id) \
    );
sql_initdb_11_drop=DROP TABLE IF EXISTS ra;
sql_initdb_12=CREATE TABLE ra (\
    entity_id   INTEGER NOT NULL REFERENCES entity(entity_id),\
	raint       TEXT NOT NULL, \
	racaption   TEXT NOT NULL, \
	seqno       INTEGER NOT NULL, \
	PRIMARY KEY(entity_id,raint) \
    );
sql_initdb_18_drop=DROP TABLE IF EXISTS swcvdef;
sql_initdb_19=CREATE TABLE swcvdef (\
    swcv_ref    INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL CHECK(swcv_ref>0), \
    host_id     INTEGER NOT NULL REFERENCES host(host_id) , \
    session_id  INTEGER NOT NULL REFERENCES session(session_id) , \
    vendor      TEXT NOT NULL, \
    ws_id       BLOB      NOT NULL, \
    sp          INTEGER NOT NULL, \
    modify_date TIMESTAMP NOT NULL, \
    modify_user TEXT NOT NULL, \
    name        TEXT NOT NULL, \
    caption     TEXT NOT NULL, \
    type        TEXT NOT NULL CHECK(type='S' or type='L'), \
    is_editable INTEGER NOT NULL CHECK(is_editable between 0 and 1), \
    is_original INTEGER NOT NULL CHECK(is_original between 0 and 1), \
    elementtypeid TEXT NOT NULL, \
    versionset  TEXT NOT NULL, \
    index_me    INTEGER NOT NULL DEFAULT 0 CHECK(index_me IN (0,1)), \
    /* assertions */  \
    CONSTRAINT  unq_swcvo   UNIQUE (host_id,ws_id,sp)\
   );
sql_initdb_20_drop=DROP TABLE IF EXISTS swcvdep;
sql_initdb_21=CREATE TABLE swcvdep (\
	session_id  INTEGER NOT NULL REFERENCES session(session_id), \
    swcv_ref    INTEGER NOT NULL REFERENCES swcvdef(swcv_ref), \
    depswcv_ref INTEGET REFERENCES swcvdef(swcv_ref), \
    seqno       INTEGER NOT NULL, \
    depws_id	BLOB NOT NULL, \
    depws_name  TEXT NOT NULL, \
    /* assertions */  \
    CONSTRAINT  unq_swcvdep_1   UNIQUE (swcv_ref,depswcv_ref,depws_id),\
    CHECK (swcv_ref <> depswcv_ref)\
    );
sql_initdb_24_drop=DROP TABLE IF EXISTS object;
sql_initdb_25=CREATE TABLE object (\
    object_ref  INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, \
    host_id     INTEGER NOT NULL REFERENCES host(host_id), \
    swcv_ref    INTEGER REFERENCES swcvdef(swcv_ref), \
    object_id   BLOB    NOT NULL CHECK (length(object_id)=16), /* guid */  \
    entity_id   INTEGER NOT NULL REFERENCES entity(entity_id), \
    is_deleted  INTEGER NOT NULL CHECK (is_deleted=0 or is_deleted=1), \
    session_id  INTEGER NOT NULL REFERENCES session(session_id), \
    url_ext     TEXT, \
    /* assertions */                \
    CONSTRAINT  unq    UNIQUE (host_id,swcv_ref,object_id),\
    CONSTRAINT  unqurl UNIQUE (host_id,url_ext)\
  );
sql_initdb_26_drop=DROP TABLE IF EXISTS version;
sql_initdb_27=CREATE TABLE version (\
    object_ref  INTEGER NOT NULL REFERENCES object(object_ref), \
    version_id  BLOB    NOT NULL,   \
    session_id  INTEGER NOT NULL,   \
    is_active   INTEGER NOT NULL,   \
    PRIMARY KEY(object_ref,version_id), \
    /* assertions */                \
    CHECK (length(version_id)=16),   \
    CHECK (is_active=0 OR is_active=1) \
  );
sql_initdb_28_index=CREATE INDEX idx_version ON version (object_ref,version_id);  

################################################################### when db is opened
# проверка FK. Только на родных драйверах!     
sql_0pendb_001_fk=PRAGMA foreign_keys = ON;
# чтобы проверить код, включает обратный порядок выборок когда нет явного ORDER BY
sql_0pendb_002_reverse=PRAGMA reverse_unordered_selects = ON;
# page size
sql_0pendb_003_pagesize=PRAGMA page_size=8192;
# temporary tables -- need to be created every connection

#sql_0pendb_ed4=DROP TABLE IF EXISTS tmp4;
sql_0pendb_et4=CREATE TEMP TABLE IF NOT EXISTS tmp4 (\
    entity_id   INTEGER NOT NULL, \
    oid         BLOB    NOT NULL CHECK (length(oid)=16),\
    vid         BLOB    NOT NULL CHECK (length(vid)=16),\
    del         INTEGER NOT NULL CHECK (del=0 OR del=1),\
    PRIMARY KEY(oid,vid)\
  );
#sql_0pendb_ed8=DROP TABLE IF EXISTS tmp8;
sql_0pendb_et8=CREATE TEMP TABLE IF NOT EXISTS tmp8 (\
    entity_id   INTEGER NOT NULL, \
    oid         BLOB    NOT NULL CHECK (length(oid)=16), \
    vid         BLOB    NOT NULL CHECK (length(vid)=16), \
    swcv        BLOB    NOT NULL CHECK (length(oid)=16), \
    sp          INTEGER NOT NULL, \
    ref         INTEGER NOT NULL,  /* reference to SWCV */ \
    del         INTEGER NOT NULL CHECK (del=0 OR del=1), \
    idx         INTEGER NOT NULL, \
    PRIMARY KEY(oid,vid,swcv,sp)\
  );
sql_icheck=PRAGMA integrity_check;  
##################################################################
sql_page_count=PRAGMA page_count;

#######################################################################
#sql_selectconfig=SELECT c.property, c.value, c.lastchange FROM config c;
sql_config_getversion=SELECT value FROM config WHERE property = 'DB_VERSION';
sql_config_putversion=INSERT INTO config (property,value,session_id) VALUES('DB_VERSION',?1,?2);
sql_insertconfig=INSERT INTO config (property,value) VALUES (?,?);
#sql_updateconfig=UPDATE config SET value=?, lastchange=CURRENT_TIMESTAMP WHERE property=?;

# indexation
sql_config_put=INSERT INTO config (property,value,session_id,host_id) VALUES (?1,?2,?3,?4);
sql_config_upd=UPDATE config SET value=?2, session_id=?3 WHERE property=?1 AND host_id=?4;
sql_config_getone=SELECT value,session_id FROM config WHERE property=?1 AND host_id=?2;
sql_config_gethost=SELECT property,value,session_id FROM config WHERE host_id=?1;

# session and host management
sql_startsession=INSERT INTO session (finish_time) VALUES (null); 
sql_finishsession=UPDATE session SET finish_time=CURRENT_TIMESTAMP where session_id=?1;     
sql_host_get=SELECT host_id FROM host WHERE host_url=?2 OR sid=?1;
sql_host_put=INSERT INTO host (sid,host_url,session_id) VALUES (?1,?2,?3);
##############################


#sql_entities_getcount=SELECT count(*) FROM entity WHERE host_id=?1;
# sql_entities_ins_key = entity_id
sql_entities_ins=INSERT INTO entity(side,internal,host_id,caption,seqno,session_id) VALUES (?1,?2,?3,?4,?5,?6);
sql_ra_ins=INSERT INTO ra(entity_id,raint,racaption,seqno) VALUES (?1,?2,?3,?4);

#sql_entities_getall=SELECT e.entity_id,e.side,e.internal,e.caption,e.seqno FROM entity e WHERE host_id=?1 ORDER BY seqno;
sql_entities_getside=SELECT e.entity_id,e.internal,e.caption,e.seqno FROM entity e WHERE host_id=?1 AND side=?2 ORDER BY seqno;
sql_ra_getone=SELECT r.raint, r.racaption, r.seqno FROM ra r WHERE r.entity_id=?1 ORDER BY seqno;

# SWCV
#sql_swcv_getone=SELECT s.swcv_ref, s.index_me FROM swcv s \
#    WHERE s.host_id=?1 AND ws_id=?2 AND sp=?3 AND seqno=?4;
#sql_swcv_putone=INSERT INTO swcv(host_id,session_id,ws_id,type,vendor,caption,name,sp,seqno, \
#    modify_date,modify_user,dependent_id,is_editable,is_original,index_me) \
#    VALUES (?1,?2,?3,?4,?5,?6,?7,?8,?9,\
#      ?10,?11,?12,?13,?14,?15);
sql_swcvdef_getone=SELECT s.swcv_ref, s.index_me FROM swcvdef s \
    WHERE s.host_id=?1 AND ws_id=?2 AND sp=?3;
sql_swcvdef_putone=INSERT INTO swcvdef(host_id,session_id,ws_id,type, \
	vendor,caption,name,sp, \
    modify_date,modify_user,is_editable,is_original,\
    elementtypeid,versionset,index_me) \
    VALUES (?1,?2,?3,?4,\
      ?5,?6,?7,?8,\
      ?9,?10,?11,?12,\
      ?13,?14,?15);
sql_swcvdeps_getone=SELECT depswcv_ref,seqno,depws_id,depws_name FROM swcvdep WHERE swcv_ref=?1;
sql_swcvdeps_delone=DELETE FROM swcvdep WHERE swcv_ref=?1;
sql_swcvdeps_putone=INSERT INTO swcvdep (swcv_ref,depswcv_ref,seqno,depws_id,depws_name,session_id) \
	VALUES (?1,?2,?3,?4,?5,?6); 

# objects. Directory 
sql_objdir_report=SELECT 'CURRENT_LIVE' txt, t.oid, t.vid, o.object_ref \
   FROM tmp4 t, object o, version v \
  WHERE t.entity_id=?1 AND t.oid=o.object_id AND t.vid=v.version_id AND o.object_ref=v.object_ref AND o.is_deleted=t.del AND o.is_deleted=0 AND v.is_active=1 \
    AND o.entity_id=?1 \
 UNION \
 SELECT 'CURRENT_DEAD' txt, t.oid, t.vid, o.object_ref \
   FROM tmp4 t, object o, version v \
  WHERE t.entity_id=?1 AND t.oid=o.object_id AND t.vid=v.version_id AND o.object_ref=v.object_ref AND o.is_deleted=t.del AND o.is_deleted=1 \
    AND o.entity_id=?1 \
 UNION \
 SELECT 'NEWVER_LIVE' txt, t.oid, t.vid, o.object_ref \
   FROM tmp4 t, object o \
  WHERE t.entity_id=?1 AND t.oid=o.object_id AND o.entity_id=?1 AND o.is_deleted=0 AND t.del=0 \
    AND o.is_deleted=0 AND NOT EXISTS (SELECT 1 FROM version v WHERE v.object_ref=o.object_ref AND v.version_id=t.vid) \
 UNION \
 SELECT 'NEWVER_DEAD' txt, t.oid, t.vid, o.object_ref \
   FROM tmp4 t, object o \
  WHERE t.entity_id=?1 AND t.oid = o.object_id AND o.entity_id=?1 AND o.is_deleted=0 AND t.del=1 \
    AND NOT EXISTS (SELECT 1 FROM version v WHERE v.object_ref=o.object_ref AND v.version_id=t.vid) \
 UNION \
 SELECT 'NEWOBJECT' txt, t.oid, t.vid, -1 \
   FROM tmp4 t \
  WHERE t.entity_id=?1 AND NOT EXISTS (SELECT 1 FROM object o WHERE t.oid=o.object_id AND o.entity_id=?1) \
 ;
sql_objdir_del=UPDATE object SET is_deleted=1,session_id=?2 \
    WHERE swcv_ref IS NULL AND object_ref=?1 AND is_deleted=0;
sql_objdir_ins=INSERT INTO object (host_id,session_id,object_id,entity_id,url_ext,is_deleted) \
    VALUES (?1,?2,?3,?4,?5,?6); 
sql_ver_ins=INSERT INTO version (object_ref,version_id,session_id,is_active) \
    VALUES (?1,?2,?3,?4);
sql_ver_deactv=UPDATE version SET is_active=0 WHERE object_ref=?1 AND is_active=1;

sql_objrep_ins=INSERT INTO object (host_id,session_id,swcv_ref,object_id,entity_id,url_ext,is_deleted) \
    VALUES (?1,?2,?3,?4,?5,?6,?7); 
sql_objrep_del=UPDATE object SET is_deleted=1,session_id=?2 \
    WHERE swcv_ref IS NOT NULL AND object_ref=?1 AND is_deleted=0;
sql_objrep_report=SELECT 'NEWOBJECT' txt,t.oid,t.vid,t.ref swcv_ref,-1 oref \
   FROM tmp8 t \
   WHERE t.entity_id=?1 AND NOT EXISTS \
    (SELECT 1 FROM object o WHERE t.oid=o.object_id AND t.ref=o.swcv_ref AND o.entity_id=?1) \n\
 UNION \
  SELECT 'CURRENT_LIVE' txt,t.oid,t.vid,t.ref,o.object_ref \
   FROM tmp8 t, object o, version v \
  WHERE t.oid=o.object_id AND t.vid=v.version_id AND t.ref=o.swcv_ref AND o.object_ref=v.object_ref AND o.is_deleted=t.del AND o.is_deleted=0 AND v.is_active=1 \
    AND t.entity_id=?1 AND o.entity_id=?1 \n\
 UNION \
 SELECT 'CURRENT_DEAD' txt,t.oid,t.vid,t.ref,o.object_ref \
   FROM tmp8 t, object o, version v \
  WHERE t.oid=o.object_id AND t.vid=v.version_id AND t.ref=o.swcv_ref AND o.object_ref=v.object_ref AND o.is_deleted=t.del AND o.is_deleted=1 \
    AND t.entity_id=?1 AND o.entity_id=?1 \n\
 UNION \
 SELECT 'NEWVER_LIVE' txt,t.oid,t.vid,t.ref,o.object_ref \
   FROM tmp8 t, object o \
  WHERE t.entity_id=?1 AND t.oid=o.object_id AND o.entity_id=?1 AND o.is_deleted=0 AND t.del=0 AND t.ref=o.swcv_ref \
    AND o.is_deleted=0 \
    AND NOT EXISTS (SELECT 1 FROM version v WHERE v.object_ref=o.object_ref AND v.version_id=t.vid) \n\
 UNION \
 SELECT 'NEWVER_DEAD' txt,t.oid,t.vid,t.ref,o.object_ref \
   FROM tmp8 t, object o \
  WHERE t.entity_id=?1 AND t.oid = o.object_id AND o.entity_id=?1 AND o.is_deleted=0 AND t.del=1 AND t.ref=o.swcv_ref \
    AND NOT EXISTS (SELECT 1 FROM version v WHERE v.object_ref=o.object_ref AND v.version_id=t.vid) \
 \n;

sql_cc_list=SELECT is_deleted,url_ext,object_id,object_ref,url_ext FROM object o, entity e \
    WHERE o.host_id=?1 AND e.host_id=?1 AND o.entity_id=e.entity_id \
        AND e.side='directory' AND e.internal='Channel' ;

# temporary tables interfaces
sql_tmp4_del=DELETE FROM tmp4 WHERE entity_id=?1;
sql_tmp4_ins=INSERT INTO tmp4 (entity_id,oid,vid,del) VALUES (?1,?2,?3,?4);

sql_tmp8_del=DELETE FROM tmp8 WHERE entity_id=?1;
sql_tmp8_ins=INSERT INTO tmp8 (entity_id,oid,vid,swcv,sp,del,ref,idx) VALUES (?1,?2,?3,?4,?5,?6,\
   (SELECT swcv_ref FROM swcvdef WHERE host_id=?7 AND ws_id=?4 AND sp=?5),\
   ?8);
sql_tmp8_idx=SELECT ref, idx FROM tmp8 WHERE entity_id=?1 ORDER BY idx ASC;

# Валидатор БД
#SELECT o.object_ref, 'NO VERSION EXISTS' txt FROM object o 
#WHERE NOT EXISTS (SELECT 1 FROM version v WHERE o.object_ref = v.object_ref  )
#UNION 
#-- проверка что у каждой версии есть хоть один объект (FK)
#SELECT v.object_ref, 'NO OBJECT EXISTS' txt FROM version v
#WHERE NOT EXISTS (SELECT 1 FROM object o WHERE o.object_ref = v.object_ref)
#UNION
#-- проверка, что активных версий 1 или 0
#SELECT o.object_ref, 'TOO MANY ACTIVE VERSIONS' txt FROM object o
#WHERE EXISTS (SELECT count() FROM version v WHERE o.object_ref = v.object_ref AND is_active=1 GROUP BY object_ref HAVING count() > 1) 
#UNION
#-- проверка наличия у неудалённого объекта строго одной активной версии
#SELECT o.object_ref, 'NO ACTIVE VERSION FOR NON-DELETED OBJECT' txt FROM object o
#WHERE o.is_deleted=0 AND NOT EXISTS (SELECT 1 FROM version v WHERE o.object_ref=v.object_ref AND is_active=1)
#;
sql_check01=SELECT o.object_ref, 'NO VERSION EXISTS' txt FROM object o \
		WHERE NOT EXISTS (SELECT 1 FROM version v WHERE o.object_ref=v.object_ref) \
	UNION \
	SELECT v.object_ref, 'NO OBJECT EXISTS' txt FROM version v \
		WHERE NOT EXISTS (SELECT 1 FROM object o WHERE o.object_ref=v.object_ref) \
	UNION \
	SELECT o.object_ref, 'TOO MANY ACTIVE VERSIONS' txt FROM object o \
    	WHERE EXISTS (SELECT count() FROM version v WHERE o.object_ref = v.object_ref AND is_active=1 GROUP BY object_ref HAVING count() > 1) \
	UNION \
	SELECT o.object_ref, 'NO ACTIVE VERSION FOR NON-DELETED OBJECT' txt FROM object o \
		WHERE o.is_deleted=0 AND NOT EXISTS (SELECT 1 FROM version v WHERE o.object_ref=v.object_ref AND is_active=1) \
	;
sql_diff01=select 'LIVE' t,ol.object_ref,ol.is_deleted,vl.version_id,vl.is_active, \
  ot.object_ref, ot.is_deleted delr, vt.version_id, vt.is_active \
	from object ol, version vl   \
	  left join object ot on ol.object_id = ot.object_id and ot.entity_id=?4 and ot.host_id=?2 \
	    left join version vt on ot.object_ref=vt.object_ref and vl.version_id = vt.version_id \
	where ol.entity_id=?3 and ol.host_id=?1 and ol.is_deleted=0 \
   	;
sql_diff02=select o.url_ext,o.object_id,v.version_id,o.object_ref,o.is_deleted \
    FROM object o INNER JOIN version v ON o.object_ref=v.object_ref \
    WHERE o.entity_id=?1;

#sql_objdir_getall=SELECT t.oid, t.vid, o.object_id, o.object_ref, o.is_deleted, v.version_id, v.is_active, o.url_ext \
#    FROM object o LEFT JOIN version v ON o.object_ref = v.object_ref AND v.is_active=1  \
#      LEFT JOIN tmp2 t ON o.object_id = t.oid AND v.version_id=t.vid \
#    WHERE o.entity_id=?1 \
#  UNION \
#  SELECT t.oid, t.vid, o.object_id, o.object_ref, o.is_deleted,v.version_id, v.is_active, o.url_ext \
#    FROM tmp2 t LEFT OUTER JOIN object o ON t.oid = o.object_id AND o.entity_id=?1  \
#      LEFT OUTER JOIN version v ON o.object_ref = v.object_ref AND v.is_active=1 AND t.vid=v.version_id \
#  ;

# TODO: 999 is seqno
sql_object_transpnames=SELECT o.object_id,o.url_ext, e.side, e.internal, s.ws_id, s.sp \
	 FROM object o LEFT JOIN entity e ON o.entity_id = e.entity_id \
	     LEFT JOIN swcvdef s ON o.swcv_ref = s.swcv_ref \
	 WHERE o.object_ref = ?1 ;

# host file (for payloads)
hosql_init_00=PRAGMA page_size=16384;

#	2012-08-17 CHECK (is_dirty=0 OR is_dirty=1) в objlink убран. Теперь is_dirty рассматривается так:
#   0 -- скачивать не надо (успешно)
#   1 -- скачивать надо (признак скачивания)
#   2 и больше -- скачивать надо (признак неуспешных попыток ранее). 
#       Если число достигнет, например 1000, значит объект не скачивается и можно не тратить усилия
#       попутно исправлен ассерт
hosql_init_01=CREATE TABLE IF NOT EXISTS objlink (\
    object_ref  INTEGER NOT NULL, \
    object_id   BLOB NOT NULL, \
    version_id  BLOB NOT NULL, \
    session_id  INTEGER NOT NULL, \
    url         TEXT NOT NULL, \
    is_dirty    INTEGER NOT NULL /* 0 for refreshed object, 1 is flag to download */, \
    bloz        BLOB, \
	PRIMARY KEY(object_ref,version_id), \
	CHECK (length(version_id)=16 AND length(object_id)=16) \
	);
hosql_init_02=CREATE TABLE IF NOT EXISTS inbox (\
    object_ref  INTEGER NOT NULL, \
    object_id   BLOB NOT NULL, \
    version_id  BLOB NOT NULL, \
    session_id  INTEGER NOT NULL, \
    url         TEXT NOT NULL, \
    dlcount     INTEGER NOT NULL, \
    ancount     INTEGER NOT NULL, \
	PRIMARY KEY(object_id,version_id), \
	CHECK (length(version_id)=16 AND length(object_id)=16) \
	);
hosql_insOV_dirty=INSERT INTO inbox (object_ref,object_id,version_id,session_id,url,dlcount) \
    VALUES (?1,?2,?3,?4,?5,0 \
    );
hosql_getinbox_previous=SELECT     
hosql_getinbox=SELECT url,object_ref,version_id,is_dirty FROM objlink WHERE is_dirty > 0;
hosql_undirty=UPDATE objlink SET is_dirty=0, bloz=?3 WHERE object_ref=?1 AND version_id=?2;
hosql_incdirty=UPDATE objlink SET is_dirty=is_dirty+1 WHERE object_ref=?1 AND version_id=?2;
hosql_getpayload=SELECT bloz, object_id,is_dirty FROM objlink WHERE object_ref=?1 AND version_id=?2;

# migration scripts. Very dumb now, because have no knowledge of virtual tables
hosql_migr_01_attach=ATTACH DATABASE ?1 AS migr;
hosql_migr_02_clear=DELETE FROM migr.objlink;
hosql_migr_03_objlink=INSERT INTO migr.objlink SELECT * FROM objlink;
############################    